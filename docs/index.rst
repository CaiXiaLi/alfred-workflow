.. Alfred-Workflow documentation master file, created by
   sphinx-quickstart on Sun Mar  2 12:09:28 2014.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

========================
Alfred-Workflow Overview
========================

A Python helper library for `Alfred 2 <http://www.alfredapp.com/>`_ workflow
authors, developed and hosted on `GitHub`_.

Alfred workflows typically take user input, fetch data from the Web or
elsewhere, filter them and display results to the user. **Alfred-Workflow**
takes care of a lot of the details for you, allowing you to concentrate your
efforts on your workflow's functionality.

**Alfred-Workflow** is *the only library* (in any language) that supports all
of Alfred 2's features (as of version 2.5).

There are convenience methods for:

- Parsing script arguments.
- Text decoding/normalisation.
- Storing data and settings.
- Caching data from, for example web services, with a simple API for updating
  expired data.
- Securely storing (and syncing) passwords using OS X Keychain.
- Generating XML output for Alfred.
- Including external libraries (adding directories to ``sys.path``).
- Filtering results using an Alfred-like, fuzzy search algorithm.
- Generating log output for debugging errors.
- Capturing errors, so the workflow doesn't fail silently.
- Running background processes to keep your workflow responsive.
- Updating your workflow from GitHub releases.

Quick example
=============

Here's how to show recent `Pinboard.in <https://pinboard.in/>`_ posts in Alfred.

Create a new workflow in Alfred's preferences. Add a **Script Filter** with
Language ``/usr/bin/python`` and paste the following into the **Script** field
(changing ``API_KEY``):

.. code-block:: python
    :linenos:
    :emphasize-lines: 4

    import sys
    from workflow import Workflow, ICON_WEB, web

    API_KEY = 'your-pinboard-api-key'

    def main(wf):
        url = 'https://api.pinboard.in/v1/posts/recent'
        params = dict(auth_token=API_KEY, count=20, format='json')
        r = web.get(url, params)
        r.raise_for_status()
        for post in r.json()['posts']:
            wf.add_item(post['description'], post['href'], arg=post['href'],
                        uid=post['hash'], valid=True, icon=ICON_WEB)
        wf.send_feedback()


    if __name__ == u"__main__":
        wf = Workflow()
        sys.exit(wf.run(main))


Add an **Open URL** action to your workflow with ``{query}`` as the **URL**,
connect your **Script Filter** to it, and you can now hit **ENTER** on a
Pinboard item in Alfred to open it in your browser.

(Please note, using the above example code as a workflow will likely get
you banned by the Pinboard API. See the :ref:`tutorial` if you want to
build a real Pinboard workflow.)

Installation
============

With pip
--------

You can install **Alfred-Workflow** directly into your workflow with::

    pip install --target=/path/to/my/workflow Alfred-Workflow


.. important::

    If you intend to distribute your workflow to other users, you should
    include **Alfred-Workflow** (and other non-standard Python libraries your
    workflow requires) within your workflow as described above. **Do not** ask
    users to install anything into their system Python. That way lies broken
    software.

From source
-----------

Download the ``alfred-workflow-X.X.zip`` file from the
`GitHub releases page <https://github.com/deanishe/alfred-workflow/releases>`_
and either extract the ZIP to the root directory of your workflow (where
``info.plist`` is) or place the ZIP in the root directory and add
``sys.path.insert(0, 'alfred-workflow-X.X.zip')`` to the top of your
Python scripts.

.. important::

    :mod:`~workflow.background` and :mod:`~workflow.update` will not work
    if you are importing **Alfred-Workflow** from a zip file.

    If you need to use :mod:`~workflow.background` or the self-updating
    functionality, you *must* extract the zip archive.

Alternatively, you can download
`the source code <https://github.com/deanishe/alfred-workflow/archive/master.zip>`_
from the `GitHub repository <https://github.com/deanishe/alfred-workflow>`_ and
copy the ``workflow`` subfolder to the root directory of your workflow.

Your Workflow directory should look something like this (where
``yourscript.py`` contains your workflow code and ``info.plist`` is
the Workflow information file generated by Alfred)::

    Your Workflow/
        info.plist
        icon.png
        workflow/
            __init__.py
            background.py
            workflow.py
            web.py
        yourscript.py
        etc.


Or like this::

    Your Workflow/
        info.plist
        icon.png
        workflow-1.X.X.zip
        yourscript.py
        etc.



The Alfred-Workflow Tutorial
============================

This is a :ref:`two-part tutorial <tutorial>` on writing an Alfred workflow
with **Alfred-Workflow**, taking you through the basics to a full-featured
workflow. This is the best starting point for workflow authors new to Python
or programming in general. More experienced Python coders should skim this
or skip straight ahead to the :ref:`user-manual`.

.. toctree::
    :maxdepth: 2

    tutorial



User Manual
===========

If you know your way around Python and Alfred, here's an overview of what
**Alfred-Workflow** can do and how to do it.

.. toctree::
   :maxdepth: 2

   user-manual/index


API documentation
=================

Detailed documetation of the **Alfred-Workflow** APIs, detailing the full API.

.. toctree::
  :maxdepth: 2

  api/index

Script Filter results and the XML format
----------------------------------------

An in-depth look at the many parameters accepted by
:meth:`Workflow.add_item() <workflow.workflow.Workflow.add_item>`
and how they interact with one another.

This should also serve as a decent reference to Alfred's XML format for folks
who aren't using **Alfred-Workflow**. The official Alfred 2 documentation is
scattered, incomplete, out-of-date, and in places, simply incorrect.

I make no guarantees for the correctness or completeness of this documentation,
but it's currently (as of Alfred version 2.5) more accurate and complete than
the official documentation.

.. toctree::
   :maxdepth: 3

   script_filter_results

Indices and tables
==================

* :ref:`genindex`
* :ref:`search`


.. _GitHub: https://github.com/deanishe/alfred-workflow
